error[E0277]: the trait bound `NotZerocopy: AsBytes` is not satisfied
  --> tests/ui/derive_transparent.rs:31:21
   |
31 | assert_is_as_bytes!(TransparentStruct<NotZerocopy>);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `AsBytes` is not implemented for `NotZerocopy`
   |
   = help: the following other types implement trait `AsBytes`:
             ()
             AU16
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
           and $N others
note: required for `TransparentStruct<NotZerocopy>` to implement `AsBytes`
  --> tests/ui/derive_transparent.rs:21:10
   |
21 | #[derive(AsBytes, FromBytes, Unaligned)]
   |          ^^^^^^^
note: required by a bound in `is_as_bytes`
  --> tests/ui/../util.rs
   |
   |             const fn is_as_bytes<T: zerocopy::AsBytes + ?Sized>() {}
   |                                     ^^^^^^^^^^^^^^^^^ required by this bound in `is_as_bytes`
   |
  ::: tests/ui/derive_transparent.rs:31:1
   |
31 | assert_is_as_bytes!(TransparentStruct<NotZerocopy>);
   | --------------------------------------------------- in this macro invocation
   = note: this error originates in the derive macro `AsBytes` which comes from the expansion of the macro `assert_is_as_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: FromBytes` is not satisfied
  --> tests/ui/derive_transparent.rs:32:23
   |
32 | assert_is_from_bytes!(TransparentStruct<NotZerocopy>);
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `FromBytes` is not implemented for `NotZerocopy`
   |
   = help: the following other types implement trait `FromBytes`:
             ()
             AU16
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
           and $N others
note: required for `TransparentStruct<NotZerocopy>` to implement `FromBytes`
  --> tests/ui/derive_transparent.rs:21:19
   |
21 | #[derive(AsBytes, FromBytes, Unaligned)]
   |                   ^^^^^^^^^
note: required by a bound in `is_from_bytes`
  --> tests/ui/../util.rs
   |
   |             const fn is_from_bytes<T: zerocopy::FromBytes + ?Sized>() {}
   |                                       ^^^^^^^^^^^^^^^^^^^ required by this bound in `is_from_bytes`
   |
  ::: tests/ui/derive_transparent.rs:32:1
   |
32 | assert_is_from_bytes!(TransparentStruct<NotZerocopy>);
   | ----------------------------------------------------- in this macro invocation
   = note: this error originates in the derive macro `FromBytes` which comes from the expansion of the macro `assert_is_from_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: Unaligned` is not satisfied
  --> tests/ui/derive_transparent.rs:33:22
   |
33 | assert_is_unaligned!(TransparentStruct<NotZerocopy>);
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Unaligned` is not implemented for `NotZerocopy`
   |
   = help: the following other types implement trait `Unaligned`:
             ()
             F32<O>
             F64<O>
             I128<O>
             I16<O>
             I32<O>
             I64<O>
             ManuallyDrop<T>
           and $N others
note: required for `TransparentStruct<NotZerocopy>` to implement `Unaligned`
  --> tests/ui/derive_transparent.rs:21:30
   |
21 | #[derive(AsBytes, FromBytes, Unaligned)]
   |                              ^^^^^^^^^
note: required by a bound in `is_unaligned`
  --> tests/ui/../util.rs
   |
   |             const fn is_unaligned<T: zerocopy::Unaligned + ?Sized>() {}
   |                                      ^^^^^^^^^^^^^^^^^^^ required by this bound in `is_unaligned`
   |
  ::: tests/ui/derive_transparent.rs:33:1
   |
33 | assert_is_unaligned!(TransparentStruct<NotZerocopy>);
   | ---------------------------------------------------- in this macro invocation
   = note: this error originates in the derive macro `Unaligned` which comes from the expansion of the macro `assert_is_unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)
