error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-msrv/struct.rs:137:11
    |
137 | #[repr(C, align(2))]
    |           ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-msrv/struct.rs:141:21
    |
141 | #[repr(transparent, align(2))]
    |                     ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-msrv/struct.rs:147:16
    |
147 | #[repr(packed, align(2))]
    |                ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-msrv/struct.rs:151:18
    |
151 | #[repr(align(1), align(2))]
    |                  ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-msrv/struct.rs:155:8
    |
155 | #[repr(align(2), align(4))]
    |        ^^^^^^^^

error[E0692]: transparent struct cannot have other repr hints
   --> tests/ui-msrv/struct.rs:141:8
    |
141 | #[repr(transparent, align(2))]
    |        ^^^^^^^^^^^  ^^^^^^^^

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
  --> tests/ui-msrv/struct.rs:31:10
   |
31 | #[derive(KnownLayout)]
   |          ^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: within `KL00`, the trait `Sized` is not implemented for `[u8]`
note: required because it appears within the type `KL00`
  --> tests/ui-msrv/struct.rs:32:8
   |
32 | struct KL00(u8, NotKnownLayoutDst);
   |        ^^^^
   = help: see issue #48214
   = note: this error originates in the derive macro `KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
  --> tests/ui-msrv/struct.rs:36:10
   |
36 | #[derive(KnownLayout)]
   |          ^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: within `KL02`, the trait `Sized` is not implemented for `[u8]`
note: required because it appears within the type `KL02`
  --> tests/ui-msrv/struct.rs:37:8
   |
37 | struct KL02(u8, [u8]);
   |        ^^^^
   = help: see issue #48214
   = note: this error originates in the derive macro `KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotKnownLayoutDst: zerocopy::KnownLayout` is not satisfied
  --> tests/ui-msrv/struct.rs:41:10
   |
41 | #[derive(KnownLayout)]
   |          ^^^^^^^^^^^ the trait `zerocopy::KnownLayout` is not implemented for `NotKnownLayoutDst`
   |
   = help: see issue #48214
   = note: this error originates in the derive macro `KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotKnownLayout: zerocopy::KnownLayout` is not satisfied
  --> tests/ui-msrv/struct.rs:47:10
   |
47 | #[derive(KnownLayout)]
   |          ^^^^^^^^^^^ the trait `zerocopy::KnownLayout` is not implemented for `NotKnownLayout`
   |
   = help: see issue #48214
   = note: this error originates in the derive macro `KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `UnsafeCell<()>: zerocopy::Immutable` is not satisfied
  --> tests/ui-msrv/struct.rs:55:10
   |
55 | #[derive(Immutable)]
   |          ^^^^^^^^^ the trait `zerocopy::Immutable` is not implemented for `UnsafeCell<()>`
   |
   = help: see issue #48214
   = note: this error originates in the derive macro `Immutable` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `UnsafeCell<u8>: zerocopy::Immutable` is not satisfied
  --> tests/ui-msrv/struct.rs:60:10
   |
60 | #[derive(Immutable)]
   |          ^^^^^^^^^ the trait `zerocopy::Immutable` is not implemented for `UnsafeCell<u8>`
   |
   = note: required because of the requirements on the impl of `zerocopy::Immutable` for `[UnsafeCell<u8>; 0]`
   = help: see issue #48214
   = note: this error originates in the derive macro `Immutable` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `AU16: Unaligned` is not satisfied
   --> tests/ui-msrv/struct.rs:100:10
    |
100 | #[derive(IntoBytes)]
    |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `AU16`
    |
    = help: see issue #48214
    = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `(): PaddingFree<IntoBytes2, true>` is not satisfied
   --> tests/ui-msrv/struct.rs:107:10
    |
107 | #[derive(IntoBytes)]
    |          ^^^^^^^^^ the trait `PaddingFree<IntoBytes2, true>` is not implemented for `()`
    |
    = help: the following implementations were found:
              <() as PaddingFree<T, false>>
    = help: see issue #48214
    = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `(): PaddingFree<IntoBytes3, true>` is not satisfied
   --> tests/ui-msrv/struct.rs:114:10
    |
114 | #[derive(IntoBytes)]
    |          ^^^^^^^^^ the trait `PaddingFree<IntoBytes3, true>` is not implemented for `()`
    |
    = help: the following implementations were found:
              <() as PaddingFree<T, false>>
    = help: see issue #48214
    = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests/ui-msrv/struct.rs:125:10
    |
125 | #[derive(IntoBytes)]
    |          ^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: within `IntoBytes4`, the trait `Sized` is not implemented for `[u8]`
note: required because it appears within the type `IntoBytes4`
   --> tests/ui-msrv/struct.rs:127:8
    |
127 | struct IntoBytes4 {
    |        ^^^^^^^^^^
note: required by a bound in `std::mem::size_of`
   --> $RUST/core/src/mem/mod.rs
    |
    | pub const fn size_of<T>() -> usize {
    |                      ^ required by this bound in `std::mem::size_of`
    = note: this error originates in the macro `::zerocopy::struct_has_padding` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the size for values of type `[u8]` cannot be known at compilation time
   --> tests/ui-msrv/struct.rs:129:8
    |
129 |     b: [u8],
    |        ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[u8]`
note: required by a bound in `std::mem::size_of`
   --> $RUST/core/src/mem/mod.rs
    |
    | pub const fn size_of<T>() -> usize {
    |                      ^ required by this bound in `std::mem::size_of`
