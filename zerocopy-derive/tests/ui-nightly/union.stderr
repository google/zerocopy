error: unsupported on types with type parameters
  --> tests/ui-nightly/union.rs:33:10
   |
33 | #[derive(IntoBytes)]
   |          ^^^^^^^^^
   |
   = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error: cannot derive `Unaligned` on type with alignment greater than 1
  --> tests/ui-nightly/union.rs:51:11
   |
51 | #[repr(C, align(2))]
   |           ^^^^^^^^

error: this conflicts with another representation hint
  --> tests/ui-nightly/union.rs:67:8
   |
67 | #[repr(packed, align(2))]
   |        ^^^^^^^^^^^^^^^^

error: this conflicts with another representation hint
  --> tests/ui-nightly/union.rs:73:8
   |
73 | #[repr(align(1), align(2))]
   |        ^^^^^^^^^^^^^^^^^^

error: this conflicts with another representation hint
  --> tests/ui-nightly/union.rs:79:8
   |
79 | #[repr(align(2), align(4))]
   |        ^^^^^^^^^^^^^^^^^^

error: must have #[repr(C)], #[repr(transparent)], or #[repr(packed)] attribute in order to guarantee this type's alignment
  --> tests/ui-nightly/union.rs:84:10
   |
84 | #[derive(Unaligned)]
   |          ^^^^^^^^^
   |
   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must have #[repr(C)], #[repr(transparent)], or #[repr(packed)] attribute in order to guarantee this type's alignment
  --> tests/ui-nightly/union.rs:90:10
   |
90 | #[derive(Unaligned)]
   |          ^^^^^^^^^
   |
   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `UnsafeCell<()>: zerocopy::Immutable` is not satisfied
  --> tests/ui-nightly/union.rs:24:10
   |
24 | #[derive(Immutable)]
   |          ^^^^^^^^^ the trait `zerocopy::Immutable` is not implemented for `UnsafeCell<()>`, which is required by `ManuallyDrop<UnsafeCell<()>>: zerocopy::Immutable`
   |
   = note: Consider adding `#[derive(Immutable)]` to `UnsafeCell<()>`
   = help: the following other types implement trait `zerocopy::Immutable`:
             &T
             &mut T
             ()
             *const T
             *mut T
             AU16
             F32<O>
             F64<O>
           and $N others
   = note: required for `ManuallyDrop<UnsafeCell<()>>` to implement `zerocopy::Immutable`
   = help: see issue #48214
   = note: this error originates in the derive macro `Immutable` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: `IntoBytes2` has inter-field padding
  --> tests/ui-nightly/union.rs:39:10
   |
39 | #[derive(IntoBytes)]
   |          ^^^^^^^^^ types with padding cannot implement `IntoBytes`
   |
   = help: the trait `PaddingFree<IntoBytes2, true>` is not implemented for `()`
   = note: consider using `zerocopy::Unalign` to lower the alignment of individual fields
   = note: consider adding explicit fields where padding would be
   = note: consider using `#[repr(packed)]` to remove inter-field padding
   = help: the trait `PaddingFree<IntoBytes2, false>` is implemented for `()`
   = help: see issue #48214
   = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0587]: type has conflicting packed and align representation hints
  --> tests/ui-nightly/union.rs:68:1
   |
68 | union Unaligned3 {
   | ^^^^^^^^^^^^^^^^

error[E0588]: packed type cannot transitively contain a `#[repr(align)]` type
  --> tests/ui-nightly/union.rs:92:1
   |
92 | union Unaligned7 {
   | ^^^^^^^^^^^^^^^^
   |
note: `AU16` has a `#[repr(align)]` attribute
  --> tests/ui-nightly/../include.rs
   |
   |     pub struct AU16(pub u16);
   |     ^^^^^^^^^^^^^^^
