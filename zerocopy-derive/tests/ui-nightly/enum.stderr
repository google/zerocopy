error: unrecognized representation hint
  --> tests/ui-nightly/enum.rs:19:8
   |
19 | #[repr("foo")]
   |        ^^^^^

error: unrecognized representation hint
  --> tests/ui-nightly/enum.rs:25:8
   |
25 | #[repr(foo)]
   |        ^^^

error: unsupported representation for deriving zerocopy trait(s) on an enum
  --> tests/ui-nightly/enum.rs:31:8
   |
31 | #[repr(transparent)]
   |        ^^^^^^^^^^^

error: conflicting representation hints
  --> tests/ui-nightly/enum.rs:37:8
   |
37 | #[repr(u8, u16)]
   |        ^^^^^^^

error: must have a non-align #[repr(...)] attribute in order to guarantee this type's memory layout
  --> tests/ui-nightly/enum.rs:42:10
   |
42 | #[derive(FromBytes)]
   |          ^^^^^^^^^
   |
   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error: must have a non-align #[repr(...)] attribute in order to guarantee this type's memory layout
  --> tests/ui-nightly/enum.rs:69:10
   |
69 | #[derive(TryFromBytes)]
   |          ^^^^^^^^^^^^
   |
   = note: this error originates in the derive macro `TryFromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)

error: only field-less enums can implement TryFromBytes
  --> tests/ui-nightly/enum.rs:75:1
   |
75 | / #[repr(u8)]
76 | | enum TryFromBytes2 {
77 | |     A(u8),
78 | | }
   | |_^

error: only field-less enums can implement TryFromBytes
  --> tests/ui-nightly/enum.rs:85:1
   |
85 | / enum FromZeros1 {
86 | |     A(u8),
87 | | }
   | |_^

error: only field-less enums can implement FromZeros
  --> tests/ui-nightly/enum.rs:85:1
   |
85 | / enum FromZeros1 {
86 | |     A(u8),
87 | | }
   | |_^

error: only field-less enums can implement TryFromBytes
  --> tests/ui-nightly/enum.rs:90:1
   |
90 | / enum FromZeros2 {
91 | |     A,
92 | |     B(u8),
93 | | }
   | |_^

error: only field-less enums can implement FromZeros
  --> tests/ui-nightly/enum.rs:90:1
   |
90 | / enum FromZeros2 {
91 | |     A,
92 | |     B(u8),
93 | | }
   | |_^

error: must have a non-align #[repr(...)] attribute in order to guarantee this type's memory layout
  --> tests/ui-nightly/enum.rs:95:10
   |
95 | #[derive(FromZeros)]
   |          ^^^^^^^^^
   |
   = note: this error originates in the derive macro `FromZeros` (in Nightly builds, run with -Z macro-backtrace for more info)

error: FromZeros only supported on enums with a variant that has a discriminant of `0`
   --> tests/ui-nightly/enum.rs:102:1
    |
102 | / #[repr(u8)]
103 | | enum FromZeros4 {
104 | |     A = 1,
105 | |     B = 2,
106 | | }
    | |_^

error: FromZeros only supported on enums with a variant that has a discriminant of `0`
       help: This enum has discriminants which are not literal integers. One of those may define or imply which variant has a discriminant of zero. Use a literal integer to define or imply the variant with a discriminant of zero.
   --> tests/ui-nightly/enum.rs:111:1
    |
111 | / #[repr(i8)]
112 | | enum FromZeros5 {
113 | |     A = NEGATIVE_ONE,
114 | |     B,
115 | | }
    | |_^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:122:8
    |
122 | #[repr(C)]
    |        ^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:128:8
    |
128 | #[repr(usize)]
    |        ^^^^^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:134:8
    |
134 | #[repr(isize)]
    |        ^^^^^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:140:8
    |
140 | #[repr(u32)]
    |        ^^^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:146:8
    |
146 | #[repr(i32)]
    |        ^^^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:152:8
    |
152 | #[repr(u64)]
    |        ^^^

error: FromBytes requires repr of "u8", "u16", "i8", or "i16"
   --> tests/ui-nightly/enum.rs:158:8
    |
158 | #[repr(i64)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:168:8
    |
168 | #[repr(C)]
    |        ^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:174:8
    |
174 | #[repr(u16)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:180:8
    |
180 | #[repr(i16)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:186:8
    |
186 | #[repr(u32)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:192:8
    |
192 | #[repr(i32)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:198:8
    |
198 | #[repr(u64)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:204:8
    |
204 | #[repr(i64)]
    |        ^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:210:8
    |
210 | #[repr(usize)]
    |        ^^^^^

error: Unaligned requires repr of "u8" or "i8", and no alignment (i.e., repr(align(N > 1)))
   --> tests/ui-nightly/enum.rs:216:8
    |
216 | #[repr(isize)]
    |        ^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-nightly/enum.rs:222:12
    |
222 | #[repr(u8, align(2))]
    |            ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-nightly/enum.rs:228:12
    |
228 | #[repr(i8, align(2))]
    |            ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-nightly/enum.rs:234:18
    |
234 | #[repr(align(1), align(2))]
    |                  ^^^^^^^^

error: cannot derive Unaligned with repr(align(N > 1))
   --> tests/ui-nightly/enum.rs:240:8
    |
240 | #[repr(align(2), align(4))]
    |        ^^^^^^^^

error[E0565]: meta item in `repr` must be an identifier
  --> tests/ui-nightly/enum.rs:19:8
   |
19 | #[repr("foo")]
   |        ^^^^^

error[E0552]: unrecognized representation hint
  --> tests/ui-nightly/enum.rs:25:8
   |
25 | #[repr(foo)]
   |        ^^^
   |
   = help: valid reprs are `Rust` (default), `C`, `align`, `packed`, `transparent`, `simd`, `i8`, `u8`, `i16`, `u16`, `i32`, `u32`, `i64`, `u64`, `i128`, `u128`, `isize`, `usize`

error[E0566]: conflicting representation hints
  --> tests/ui-nightly/enum.rs:37:8
   |
37 | #[repr(u8, u16)]
   |        ^^  ^^^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #68585 <https://github.com/rust-lang/rust/issues/68585>
   = note: `#[deny(conflicting_repr_hints)]` on by default

error[E0277]: the trait bound `UnsafeCell<()>: Immutable` is not satisfied
  --> tests/ui-nightly/enum.rs:51:10
   |
51 | #[derive(Immutable)]
   |          ^^^^^^^^^ the trait `Immutable` is not implemented for `UnsafeCell<()>`
   |
   = help: the following other types implement trait `Immutable`:
             &T
             &mut T
             ()
             *const T
             *mut T
             F32<O>
             F64<O>
             I128<O>
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `Immutable` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `UnsafeCell<u8>: Immutable` is not satisfied
  --> tests/ui-nightly/enum.rs:59:10
   |
59 | #[derive(Immutable)]
   |          ^^^^^^^^^ the trait `Immutable` is not implemented for `UnsafeCell<u8>`
   |
   = help: the following other types implement trait `Immutable`:
             &T
             &mut T
             ()
             *const T
             *mut T
             F32<O>
             F64<O>
             I128<O>
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `Immutable` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |
