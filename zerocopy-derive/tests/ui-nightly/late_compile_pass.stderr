warning: unexpected `cfg` condition name: `coverage_nightly`
 --> tests/ui-nightly/../include.rs
  |
  |         super::imp::KnownLayout,
  |         ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage_nightly)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default
  = note: this warning originates in the derive macro `super::imp::KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused import: `zerocopy::KnownLayout`
  --> tests/ui-nightly/late_compile_pass.rs:16:5
   |
16 | use zerocopy::KnownLayout;
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:28:10
   |
28 | #[derive(TryFromBytes)]
   |          ^^^^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `TryFromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:37:10
   |
37 | #[derive(FromZeros)]
   |          ^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `FromZeros` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: FromZeros` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:37:10
   |
37 | #[derive(FromZeros)]
   |          ^^^^^^^^^ the trait `FromZeros` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(FromZeros)]` to `NotZerocopy`
   = help: the following other types implement trait `FromZeros`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `FromZeros` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: zerocopy::TryFromBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ the trait `zerocopy::TryFromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(TryFromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::TryFromBytes`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: FromZeros` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ the trait `FromZeros` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(FromZeros)]` to `NotZerocopy`
   = help: the following other types implement trait `FromZeros`:
             ()
             *const T
             *mut T
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: zerocopy::FromBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ the trait `zerocopy::FromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(FromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::FromBytes`:
             ()
             AU16
             AtomicI16
             AtomicI32
             AtomicI64
             AtomicI8
             AtomicIsize
             AtomicU16
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: zerocopy::IntoBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:55:10
   |
55 | #[derive(IntoBytes)]
   |          ^^^^^^^^^ the trait `zerocopy::IntoBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(IntoBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::IntoBytes`:
             ()
             AU16
             AtomicBool
             AtomicI16
             AtomicI32
             AtomicI64
             AtomicI8
             AtomicIsize
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `IntoBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `AU16: Unaligned` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:65:10
   |
65 | #[derive(Unaligned)]
   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `AU16`
   |
   = note: Consider adding `#[derive(Unaligned)]` to `AU16`
   = help: the following other types implement trait `Unaligned`:
             ()
             AtomicBool
             AtomicI8
             AtomicU8
             F32<O>
             F64<O>
             I128<O>
             I16<O>
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `AU16: Unaligned` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:73:10
   |
73 | #[derive(Unaligned)]
   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `AU16`
   |
   = note: Consider adding `#[derive(Unaligned)]` to `AU16`
   = help: the following other types implement trait `Unaligned`:
             ()
             AtomicBool
             AtomicI8
             AtomicU8
             F32<O>
             F64<O>
             I128<O>
             I16<O>
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `AU16: Unaligned` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:80:10
   |
80 | #[derive(Unaligned)]
   |          ^^^^^^^^^ the trait `Unaligned` is not implemented for `AU16`
   |
   = note: Consider adding `#[derive(Unaligned)]` to `AU16`
   = help: the following other types implement trait `Unaligned`:
             ()
             AtomicBool
             AtomicI8
             AtomicU8
             F32<O>
             F64<O>
             I128<O>
             I16<O>
           and $N others
   = help: see issue #48214
   = note: this error originates in the derive macro `Unaligned` (in Nightly builds, run with -Z macro-backtrace for more info)
help: add `#![feature(trivial_bounds)]` to the crate attributes to enable
   |
9  + #![feature(trivial_bounds)]
   |

error[E0277]: the trait bound `NotZerocopy: zerocopy::FromBytes` is not satisfied
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ the trait `zerocopy::FromBytes` is not implemented for `NotZerocopy`
   |
   = note: Consider adding `#[derive(FromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::FromBytes`:
             ()
             AU16
             AtomicI16
             AtomicI32
             AtomicI64
             AtomicI8
             AtomicIsize
             AtomicU16
           and $N others
note: required for `FromBytes1` to implement `zerocopy::FromBytes`
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `<FromBytes1 as zerocopy::TryFromBytes>::is_bit_valid::assert_is_from_bytes`
  --> tests/ui-nightly/late_compile_pass.rs:46:10
   |
46 | #[derive(FromBytes)]
   |          ^^^^^^^^^ required by this bound in `assert_is_from_bytes`
   = note: this error originates in the derive macro `FromBytes` (in Nightly builds, run with -Z macro-backtrace for more info)
