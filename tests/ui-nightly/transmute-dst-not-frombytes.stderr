warning: unexpected `cfg` condition name: `coverage_nightly`
 --> tests/ui-nightly/../../zerocopy-derive/tests/include.rs
  |
  |         super::imp::KnownLayout,
  |         ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(coverage_nightly)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default
  = note: this warning originates in the derive macro `super::imp::KnownLayout` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NotZerocopy: zerocopy::FromBytes` is not satisfied
  --> tests/ui-nightly/transmute-dst-not-frombytes.rs:19:41
   |
19 | const DST_NOT_FROM_BYTES: NotZerocopy = transmute!(AU16(0));
   |                                         ^^^^^^^^^^^^^^^^^^^
   |                                         |
   |                                         the trait `zerocopy::FromBytes` is not implemented for `NotZerocopy`
   |                                         required by a bound introduced by this call
   |
   = note: Consider adding `#[derive(FromBytes)]` to `NotZerocopy`
   = help: the following other types implement trait `zerocopy::FromBytes`:
             ()
             AU16
             AtomicI16
             AtomicI32
             AtomicI64
             AtomicI8
             AtomicIsize
             AtomicU16
           and $N others
note: required by a bound in `AssertIsFromBytes`
  --> tests/ui-nightly/transmute-dst-not-frombytes.rs:19:41
   |
19 | const DST_NOT_FROM_BYTES: NotZerocopy = transmute!(AU16(0));
   |                                         ^^^^^^^^^^^^^^^^^^^ required by this bound in `AssertIsFromBytes`
   = note: this error originates in the macro `transmute` (in Nightly builds, run with -Z macro-backtrace for more info)
