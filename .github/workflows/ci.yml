name: Build & Tests

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_test:
    # Used for installing miri
    # https://rust-lang.github.io/rustup-components-history/
    env:
      TOOLCHAIN_VERSION: '2022-09-26'

    runs-on: ubuntu-latest

    strategy:
      matrix:
        channel: [ "stable", "beta", "nightly" ]
        target: [ "x86_64-unknown-linux-gnu" ]
        features: [ "" , "--features alloc,simd,simd-nightly"]

    # Prevents a workflow run from failing when a job fails
    continue-on-error: ${{ matrix.channel == 'nightly' }}

    name: Build & Test (${{ matrix.channel }} for ${{ matrix.target }}, features set to ${{ matrix.features != '' }})

    steps:
    - uses: actions/checkout@v3

    - name: Setup Rust ${{ matrix.channel }} ${{ matrix.target }}
      uses: ATiltedTree/setup-rust@v1
      with:
        rust-version: ${{ matrix.channel }}
        targets: ${{ matrix.target }}

    - name: Check ${{ matrix.channel }}
      run: cargo +${{ matrix.channel }} check --target ${{ matrix.target }} ${{ matrix.features }} --verbose

    - name: Build ${{ matrix.channel }}
      run: cargo +${{ matrix.channel }} build --target ${{ matrix.target }} ${{ matrix.features }} --verbose

    # Only run tests in the architecture that the runners are using
    - name: Run ${{ matrix.channel }} tests
      run: cargo +${{ matrix.channel }} test --target ${{ matrix.target }} ${{ matrix.features }} --verbose
      if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
    
    - name: Install cargo-miri
      run: |
        rustup toolchain install nightly-${{ env.TOOLCHAIN_VERSION }}
        rustup component add miri --toolchain nightly-${{ env.TOOLCHAIN_VERSION }}-${{ matrix.target }}
    
    - name: Run miri test
      run: cargo +nightly-${{ env.TOOLCHAIN_VERSION }}-${{ matrix.target }} miri test ${{ matrix.features }}
