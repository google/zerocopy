name: Build & Tests

on:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # See `INTERNAL.md` for an explanation of these pinned toolchain
        # versions.
        channel: [ "1.61.0", "1.64.0", nightly-2022-09-26 ]
        target: [ "i686-unknown-linux-gnu", "x86_64-unknown-linux-gnu", "arm-unknown-linux-gnueabi", "aarch64-unknown-linux-gnu", "powerpc-unknown-linux-gnu", "powerpc64-unknown-linux-gnu", "wasm32-wasi" ]
        features: [ "" , "alloc,simd", "alloc,simd,simd-nightly" ]
        exclude:
          # Exclude any combination which uses a non-nightly toolchain but
          # enables nightly features.
          - channel: "1.61.0"
            features: "alloc,simd,simd-nightly"
          - channel: "1.64.0"
            features: "alloc,simd,simd-nightly"

    name: Build & Test (${{ matrix.channel }} for ${{ matrix.target }}, features set to "${{ matrix.features }}")

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust with toolchain ${{ matrix.channel }} and target ${{ matrix.target }}
      uses: actions-rs/toolchain@v1
      with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target }}
          # Only nightly has a working Miri, so we skip installing on all other
          # toolchains. This expression is effectively a ternary expression -
          # see [1] for details.
          #
          # [1]
          # https://github.com/actions/runner/issues/409#issuecomment-752775072
          components: clippy ${{ contains(matrix.channel, 'nightly') && ', miri' || '' }}

    # The features string contains commas which cannot be part of the cache
    # key for the Rust Cache action. Instead, we hash the features
    # to get a string of legal characters.
    - name: Set feature string for cache key
      run: |
        echo "FEATURES_HASH=$(echo ${{ matrix.features }} | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_ENV

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2.0.0
      with:
        key: "${{ matrix.channel }}-${{ matrix.target }}-${{ env.FEATURES_HASH }}-${{ hashFiles('**/Cargo.lock') }}"

    - name: Check
      run: cargo +${{ matrix.channel }} check --target ${{ matrix.target }} --features "${{ matrix.features }}" --verbose

    - name: Check zerocopy-derive
      run: cargo +${{ matrix.channel }} check --manifest-path ./zerocopy-derive/Cargo.toml --target ${{ matrix.target }} --verbose
      # Don't bother to check `zerocopy-derive` multiple times; that's what
      # would happen if we ran this step once for each set of `zerocopy`
      # features.
      if: ${{ matrix.features == '' }}

    - name: Build
      run: cargo +${{ matrix.channel }} build --target ${{ matrix.target }} --features "${{ matrix.features }}" --verbose

    - name: Build zerocopy-derive
      run: cargo +${{ matrix.channel }} build --manifest-path ./zerocopy-derive/Cargo.toml --target ${{ matrix.target }} --verbose
      # Don't bother to build `zerocopy-derive` multiple times; that's what
      # would happen if we ran this step once for each set of `zerocopy`
      # features.
      if: ${{ matrix.features == '' }}

    # When building tests for the i686 target, we need certain libraries which
    # are not installed by default; `gcc-multilib` includes these libraries.
    - name: Install gcc-multilib
      run: sudo apt-get install gcc-multilib
      if: ${{ contains(matrix.target, 'i686') }}

    - name: Run tests
      run: ${{ contains(matrix.channel, 'nightly') && 'RUSTFLAGS="-Z randomize-layout"' || '' }} cargo +${{ matrix.channel }} test --target ${{ matrix.target }} --features "${{ matrix.features }}" --verbose
      # Only run tests when targetting x86 (32- or 64-bit) - we're executing on
      # x86_64, so we can't run tests for any non-x86 target.
      if: ${{ contains(matrix.target, 'x86_64') || contains(matrix.target, 'i686') }}

    - name: Run zerocopy-derive tests
      run: cargo +${{ matrix.channel }} test --manifest-path ./zerocopy-derive/Cargo.toml --target ${{ matrix.target }} --verbose
      # Don't bother to test `zerocopy-derive` multiple times; that's what would
      # happen if we ran this step once for each set of `zerocopy` features.
      # Also, only run tests when targetting x86 (32- or 64-bit) - we're
      # executing on x86_64, so we can't run tests for any non-x86 target.
      #
      # TODO(https://github.com/dtolnay/trybuild/issues/184#issuecomment-1269097742):
      # Run compile tests when building for other targets.
      if: ${{ matrix.features == '' && (contains(matrix.target, 'x86_64') || contains(matrix.target, 'i686')) }}

    - name: Run tests under Miri
      # Skip the `ui` test since it invokes the compiler, which we can't do from
      # Miri (and wouldn't want to do anyway).
      #
      run:  ${{ contains(matrix.channel, 'nightly') && 'RUSTFLAGS="-Z randomize-layout"' || '' }} cargo +${{ matrix.channel }} miri test --target ${{ matrix.target }} --features "${{ matrix.features }}" -- --skip ui
      # Only nightly has a working Miri, so we skip installing on all other
      # toolchains.
      #
      # TODO(#22): Re-enable testing on wasm32-wasi once it works.
      if: ${{ contains(matrix.channel, 'nightly') && matrix.target != 'wasm32-wasi' }}

    - name: Clippy check
      run: cargo +${{ matrix.channel }} clippy --target ${{ matrix.target }} --features "${{ matrix.features }}" --verbose

    - name: Clippy check zerocopy-derive
      run: cargo +${{ matrix.channel }} clippy --manifest-path ./zerocopy-derive/Cargo.toml --target ${{ matrix.target }} --verbose
      # Don't bother to check `zerocopy-derive` multiple times with clippy;
      # that's what would happen if we ran this step once for each set of
      # `zerocopy` features.
      if: ${{ matrix.features == '' }}

  check_fmt:
    runs-on: ubuntu-latest
    name: Check Rust formatting
    steps:
      - uses: actions/checkout@v3
      - name: Check Rust formatting
        run: |
          set -e
          cargo fmt --check
          cargo fmt --check --manifest-path ./zerocopy-derive/Cargo.toml
          rustfmt --check ./zerocopy-derive/tests/ui/*.rs

  check_readme:
    runs-on: ubuntu-latest
    name: Check README.md
    steps:
      - uses: actions/checkout@v3
      # Cache the `cargo-readme` installation.
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.0.0
      - name: Check README.md
        run: |
          set -e
          cargo install cargo-readme --version 3.2.0
          diff <(./generate-readme.sh) README.md
          exit $?
